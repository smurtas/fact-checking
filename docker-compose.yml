#version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.12
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable security for simplicity in development, not recommended for production, better to set as true and configure security user and password
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Adjust memory settings as needed
    ports:
      - "9200:9200"
    networks:
      - default

  api:
    container_name: api  # force a specific container name for easier management
    build:
      context: .
      dockerfile: services/api/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - elasticsearch
      - database
    restart: on-failure # Restart on failure add to ensure reliability
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - default

  frontend:
    build:
      context: .
      dockerfile: services/frontend/Dockerfile
    ports:
      - "8501:8501"
    working_dir: /app/services/frontend
    depends_on:
      - api
      - database
    environment:
      - API_URL=http://api:8000
      - DOCKER=true # Set to 1 to indicate running in Docker
    networks:
      - default
    volumes:
      - ./services/frontend:/app/services/frontend
      - ./services/frontend:/app.py:/app/app.py # Ensure the app.py is correctly mounted

  ingestion:
    build:
      context: ./services/ingestion
    depends_on:
      - kafka
    restart: on-failure # Restart on failure add to ensure reliability
    env_file:
      - .env
    environment:
      - NEWS_API_KEY=${NEWS_API_KEY}
      - TOPIC_INPUT=user_topic_request
    networks:
      - default

  etl:
    build:
      context: ./services/etl
    depends_on:
      - kafka
    restart: on-failure # Restart on failure add to ensure reliability
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - default

  nlp:
    build:
      context: ./services/nlp
    depends_on:
      - kafka
      - elasticsearch
  
    restart: on-failure # Restart on failure add to ensure reliability
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - default


  database:
    build:
      context: ./services/database
    container_name: database
    volumes:
      - ./services/database:/app
    entrypoint: ["tail", "-f", "/dev/null"]
    networks:
      - default

      

networks:
  default: